from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


survey_router = Router()


# FSM - Finite State Machine - –∫–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç
class PizzaSurvey(StatesGroup):
    name = State() # name - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    age = State() # age - –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    half = State() # - –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    type_pizza= State() #- –ª—é–±–∏–º—ã–π –≤–∏–¥ –ø–∏—Ü—Ü—ã
    purity = State() # —á–∏—Å—Ç–æ—Ç–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è

@survey_router.message(Command("opros"))
async def start_survey(message: types.Message, state: FSMContext):
    await state.set_state(PizzaSurvey.name)
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")

@survey_router.message(PizzaSurvey.name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text
    # await message.answer(f"–°–ø–∞—Å–∏–±–æ, {name}!")
    await state.set_state(PizzaSurvey.age)
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")

@survey_router.message(PizzaSurvey.age)
async def process_age(message: types.Message, state: FSMContext):
    age = message.text
    if not age.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    age = int(age)
    if age < 10 or age > 100:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 10 –¥–æ 100")
        return
    await state.set_state(PizzaSurvey.half)
    await message.answer("–í–∞—à –ø–æ–ª?")

@survey_router.message(PizzaSurvey.half)
async def process_gender(message: types.Message, state: FSMContext):
    half = message.text
    await state.update_data(half= half)
    await state.set_state(PizzaSurvey.type_pizza)
    await message.answer("–í–∞—à –ª—é–±–∏–º—ã–π –≤–∏–¥ –ø–∏—Ü—Ü—ã?")

@survey_router.message(PizzaSurvey.type_pizza)
async def process_genre(message: types.Message, state: FSMContext):
    type_pizza = message.text

    await state.update_data(type_pizza=type_pizza)
    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–æ—Ç–ª–∏—á–Ω–æ")],
            [types.KeyboardButton(text="—Ö–æ—Ä–æ—à–æ")],
            [types.KeyboardButton(text="–ø–ª–æ—Ö–æ")]
        ],
        resize_keyboard=True
    )
    await state.set_state(PizzaSurvey.purity)
    await message.answer("–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —á–∏—Å—Ç–æ—Ç—É –Ω–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è?", reply_markup=kb)

purity_assessment = ["–ø–ª–æ—Ö–æ", "—Ö–æ—Ä–æ—à–æ", "–æ—Ç–ª–∏—á–Ω–æ"]

@survey_router.message(PizzaSurvey.purity, F.text.lower().in_(purity_assessment))
async def process_rating(message: types.Message, state: FSMContext):
    purity = message.text
    purity = purity_assessment.index(purity) + 3
    await state.update_data(purity=purity)
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞üòä\n–ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏ –µ—â—ë —Ä–∞–∑!üíñ")
    await state.clear()